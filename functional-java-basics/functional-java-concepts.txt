why to use functionla programming
a. declarative style instead of imperative: focussing on what to do and not how to do
b. adding abstraction and loose coupling: hiding how the task is done
c. easier to understand: as we have added abstract of how to be done, what is doine is clearly written in step by step manner
d. same code for mutilthreaded env: in imperative style the code to run in ulti thread env is different to that to run in normal
e. less error prone: as pure functions do not let side effects : pure functions are immutable like math functions
g: we can chain things and add code in single line: less code to be written

oops languages consider object as first class citizen
in functioanl programming they consider functions as first class citizen

anonymous class means a class without name
similiarly anonymous functions are functions without a name
A lambda is a function without a name

Functional interfaces: any interface having one abstract method: if interfacfe extends another interfaces. it will still be functional if there is only one abstract method in total
it can have default methods and static methods

we can use lambda inplace of anonymous inner class but only for functional interfaces

parts of method:
name, return type , paramters, access modifier, body
lambda is only for one abstract method containing interfaces
so name can be removed as there is only one method to override or implement
return type comiler can caluclate on basis of body
access modifier is always pubkic for interfaces so can be removed

so in lambda we can have paramters and body thats it
Lambda do not work fpor single abstract method abstract clasess works only for single abstract method interfaces

Lambdas are better than anoonymous inner classes as it do not create new compiled .class files
In anonymous classes it creates two .class file after compilation: one for main class and one each for anonymous inner classes
So lambda are smart : they use invokeDynamic and no need to create .class for each anonymous lambda like we do for anonymlous inner classes
The body is calculated and executed at runtime like frameworks like JS. Java uses invoke dynamic for this9

declarative -> functional programming is part/subset of declarative programming

Java have provided predefined functional interfaces(like funtion,predicate etc) . As these are reusabled by us in different scenarios
We can use them without creating a new interface that actualy provided the smae contract

Primitive specialized functional interfaces helps in perfromance as unboxing, modification and again boxing will not be needed in intermediate operations/chaining

supplier do not support chaining

method refrence or constructor reference is used to pass existing method as one of the method parameter to another function
before 1.8 java support object passing and promitive passing to methods
however we can not set method as a variable and pass to another method as an argument


Optional:
Optional is  warapper over our noirmla object ot control null pointer exception
concept is taken from scala

Optional.of(val) -> can not take null-> will throw null pointer exception
Optional.ofNullable(val) -> can take null , will return empty optional in case of null
Optional is immutable , once value is set can not modify it
16 Byte object
It create extra Optionla object so we should not use it always
Only when there is need of funcationl programming we should use it for better memory utilization

Optional .orelse is eager and .orElseGet is lazy
Hence the object that will return will get create in orElse even when value is non empty in optional
This can cause perfroamce
hence always use orElseGet as supplier is lazy and will be evaluated only when optional val is empty
in orelse case the empty case value is constructed always

Functional programming
A programming paradigm whihch allows functions as first class citizen
In oops programming we can create object in a function we can pass object and return object from function
In functional programming we can even pass a function as input argument to another function, we can return function from a function

key concepts:
a. function as first class citizen
b. pure functions : a function that do not care anything but input arguments. like state of object is not used in pure function, also pure function do not modify anything. No side effect
c. lazy evaluation
d. higher order function: Passing Functions as input argument to another function, or return function from another function or both

Side effect : even logging , printing , calling another function can cause side effects
the purpose of pure function is that we can run code in multi threaded environ

compiler uses type reference to identify return type of lambda
it uses synamic invoker to run lambda body at run time
ment easily

The variable defined outside the lambda function/stream chain are always effectively final
effective final based on java rules
a. For objects we can not assing a new object, however we can modify the variables/states
b. immutable objects like string/Integer -> we can not assign new values
c. primitives: can not assign enw value
d. collection: can not assing new collection, but can modify it

effectively final means the variable shud be initialzed and added at only one place
eg:
int a =23;
a=24
lmbda() -> uses a will give comppilation

but 

int a =23;

lmbda() -> uses a will not give comppilation

closure means the free variables that are defined out of lambda body but are used in lambda body
these values are stored in closure of lambda in JVM and is passed to another place where lambda is passed

currying is having a function that retruns another functions
This can help to keep first input same and based on apply usage second argument can be changed
 